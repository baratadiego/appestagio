version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:12
    container_name: estagios_db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - estagios_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql

  # Aplicação Django
  web:
    build: .
    container_name: estagios_web
    restart: unless-stopped
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=postgresql://estagios_user:estagios_pass@db:5432/estagios_db
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - SETUP_INITIAL_DATA=true
    volumes:
      - ./:/app
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - estagios_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/login/?next=/admin/"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: [
      "gunicorn",
      "estagios.wsgi:application",
      "--bind",
      "0.0.0.0:8000"
    ]

  # pgAdmin para administração do banco
  pgadmin:
    image: dpage/pgadmin4
    container_name: estagios_pgadmin
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - db
    networks:
      - estagios_network

  # Redis para cache (opcional)
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - estagios_network
    command: redis-server --appendonly yes

  # Nginx para proxy reverso (produção)
  nginx:
    image: nginx:alpine
    container_name: estagios_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/var/www/static
      - ./media:/var/www/media
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - estagios_network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Serviço para execução de testes com pytest
  pytest:
    build: .
    command: ["pytest"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=True
    volumes:
      - ./:/app
    depends_on:
      - db
    networks:
      - estagios_network

  # Celery para tarefas assíncronas
  celery:
    build: .
    command: celery -A estagios worker -l info
    depends_on:
      - db
      - redis
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - estagios_network

volumes:
  postgres_data:
  redis_data:

networks:
  estagios_network:
    driver: bridge

