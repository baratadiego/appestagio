version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:12
    container_name: estagios_db
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-estagios_db}
      POSTGRES_USER: ${POSTGRES_USER:-estagios_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-estagios_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - estagios_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aplicação Django
  web:
    build: .
    container_name: estagios_web
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DEBUG=False
      - SECRET_KEY=5jQcoMKTMxEKaCqnPVWopk_02wKhpI3KSxqpPLAYW24i6G3DmwXFa07zX8oRE-bvFQY
      - DATABASE_URL=postgresql://${POSTGRES_USER:-estagios_user}:${POSTGRES_PASSWORD:-estagios_pass}@db:5432/${POSTGRES_DB:-estagios_db}
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-estagios_db}
      - POSTGRES_USER=${POSTGRES_USER:-estagios_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-estagios_pass}
      - SETUP_INITIAL_DATA=true
    volumes:
      - ./media:/app/media
      - ./staticfiles:/app/staticfiles
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - estagios_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/admin/"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: >
      sh -c "
        python manage.py migrate --noinput &&
        python manage.py createsu &&
        python manage.py collectstatic --noinput &&
        gunicorn estagios.wsgi:application --bind 0.0.0.0:8000
      "

  # pgAdmin para administração do banco
  pgadmin:
    image: dpage/pgadmin4
    container_name: estagios_pgadmin
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    volumes:
      - ./docker/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - db
    networks:
      - estagios_network

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: estagios_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - estagios_network
    command: redis-server --appendonly yes

  # Nginx para proxy reverso (produção)
  nginx:
    image: nginx:alpine
    container_name: estagios_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./staticfiles:/var/www/static
      - ./media:/var/www/media
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - web
    networks:
      - estagios_network
    profiles:
      - production
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis_data:
    driver: local

networks:
  estagios_network:
    driver: bridge

